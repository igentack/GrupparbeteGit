// <auto-generated />
using System;
using Gitgruppen.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GitGruppen.Data.Migrations
{
    [DbContext(typeof(GitgruppenContext))]
    [Migration("20230114111301_fluentApi")]
    partial class fluentApi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GitGruppen.Core.Member", b =>
                {
                    b.Property<string>("PersNr")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersNr");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("GitGruppen.Core.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SpotName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParkingSpot");
                });

            modelBuilder.Entity("GitGruppen.Core.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MemberPersNr")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimeArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeDeparture")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<string>("VehicleLicensePlate")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MemberPersNr");

                    b.HasIndex("VehicleLicensePlate");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("GitGruppen.Core.Vehicle", b =>
                {
                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Arrived")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberPersNr")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfWheels")
                        .HasColumnType("int");

                    b.Property<int?>("ParkingSpotId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("LicensePlate");

                    b.HasIndex("MemberPersNr");

                    b.HasIndex("ParkingSpotId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("GitGruppen.Core.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NrOfSpaces")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("GitGruppen.Core.Receipt", b =>
                {
                    b.HasOne("GitGruppen.Core.Member", "Member")
                        .WithMany("Receipts")
                        .HasForeignKey("MemberPersNr");

                    b.HasOne("GitGruppen.Core.Vehicle", "Vehicle")
                        .WithMany("Receipts")
                        .HasForeignKey("VehicleLicensePlate");

                    b.Navigation("Member");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("GitGruppen.Core.Vehicle", b =>
                {
                    b.HasOne("GitGruppen.Core.Member", "Member")
                        .WithMany("Vehicles")
                        .HasForeignKey("MemberPersNr");

                    b.HasOne("GitGruppen.Core.ParkingSpot", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("ParkingSpotId");

                    b.HasOne("GitGruppen.Core.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("Member");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("GitGruppen.Core.Member", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("GitGruppen.Core.ParkingSpot", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("GitGruppen.Core.Vehicle", b =>
                {
                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
